
 
 
 
{
	"info": {
		"_postman_id": "ea4f41d1-2295-4bbb-be96-503f605acf47",
		"name": "AssetManagementProject.web",
		"description": "This is selection of basic REST API tests for AssetManagementProject.web created by RestApiNEx",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "JWT",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c03b18-dcc3-4f79-a242-d6e33d86375e",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e493431d-3367-488f-aea5-7ff6c99f4f35",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66536b85-5e2c-4a66-a903-5ec026dd13c8",
										"type": "text/javascript",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"account_addedid\");  ",
											"postman.setGlobalVariable(\"account_addedid\", responseBody); ",
											"pm.globals.set(\"account_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@blastasia.com\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e3c62f6-618e-46a1-9838-c0bb521fcc5f",
										"type": "text/javascript",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"accountasync_addedid\");  ",
											"postman.setGlobalVariable(\"accountasync_addedid\", responseBody); ",
											"pm.globals.set(\"accountasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@blastasia.com\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47ed0a0a-5d36-4aef-abae-9e3e236c2a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84ceac94-4490-4684-bef1-5eeca0e69f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67dac4cb-99e7-4cae-851a-035b07a0b902",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "092dfded-6b8e-4518-950c-faaed23dd10b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"account_addedrowversion\");  ",
											"postman.setGlobalVariable(\"account_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"account_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69acd59c-affe-41e5-966f-f5b57c784b0d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"accountasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"accountasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"accountasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ca76fc-10df-4ec3-82b9-a58e0454b8de",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{account_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@blastasia.com\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{account_addedrowversion}}\"     }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0afe353-c00b-4f0e-830c-9d068f19fe02",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{accountasync_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@blastasia.com\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{accountasync_addedrowversion}}\"     }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31384209-6078-4f65-90b1-f01a36ed0655",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c03b18-dcc3-4f79-a242-d6e33d86375e",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e493431d-3367-488f-aea5-7ff6c99f4f35",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c044953-195e-4f0c-b04b-98ae140f7d1f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"user_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"user_addedid\", responseBody); ",
											"pm.globals.set(\"user_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f97e586d-69cb-49ce-9c57-bfcedc1ee0ca",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"userasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"userasync_addedid\", responseBody); ",
											"pm.globals.set(\"userasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47ed0a0a-5d36-4aef-abae-9e3e236c2a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84ceac94-4490-4684-bef1-5eeca0e69f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67dac4cb-99e7-4cae-851a-035b07a0b902",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09754b14-90e7-4176-8d65-b589abd85002",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"user_addedrowversion\");  ",
											"postman.setGlobalVariable(\"user_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"user_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d8f9109-23ec-497e-a0bd-9fa397bc3240",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"userasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"userasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"userasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8f43312-caa9-412e-b3d5-cc0b5e46c476",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{user_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{user_addedrowversion}}\",\n    \"testText\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44d857ee-f00d-4441-8947-59d8bd4d6db7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{userasync_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{userasync_addedrowversion}}\",\n    \"testText\": null\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "017c1497-4de2-483d-b034-6069b8565a9f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e8fe73d-d426-4232-968e-90ecf44a71ca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
				,{
					"name": "Asset",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db19c1b2-2831-404f-b666-a33f5b342857",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2243683f-38bc-496a-aa6c-de78e2d7d968",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b873336e-27a9-409a-9968-0eb614ecd785",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7326360-67b5-4cdf-b507-9174e986cb4f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"asset_addedid\");  ",
											"postman.setGlobalVariable(\"asset_addedid\", responseBody); ",
											"pm.globals.set(\"asset_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc1ec2d5-cd07-4a85-8dd9-65042b1c81c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8e754cc-1a79-4418-a8e7-38431f23b192",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"assetasync_addedid\");  ",
											"postman.setGlobalVariable(\"assetasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecc3ed66-235c-41cc-9748-d4eb8fb0756b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a93be316-c240-477f-a8a1-5ee759d40207",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06658626-a5d7-470f-a22f-ee0edaecaa5e",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify asset counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e73ab96a-c1d2-4e19-820f-4f87dcf84107",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"asset_addedrowversion\");  ",
											"postman.setGlobalVariable(\"asset_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"asset_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify asset returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbac8174-0abf-4c9c-97bd-92552817aaef",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify asset returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f67c1140-0f60-4544-8b7f-b231d6d4e4b7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify asset updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{asset_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{asset_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55ff4a77-9dcc-4812-ad6b-d160ee102c15",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify asset updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd43506e-1293-45a5-90a1-00deee7cfe30",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "870d9950-4679-4b50-8ed8-ffc3a0ed3cc2",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT Asset tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf23e5bb-39ca-4a19-b69d-77ad83a89dca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9d83b88-3097-44e3-a45a-7d68ae3d9176",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
				,{
					"name": "Category",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f28d6aa5-4064-4436-b5e1-385f33b01643",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff6ca221-b810-48d5-acfa-1e74508eff3f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57b86f3d-06b7-4ff9-8406-c3822e3399e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bfa9ad6c-5dbc-4fb6-8003-9c71cf234fde",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"category_addedid\");  ",
											"postman.setGlobalVariable(\"category_addedid\", responseBody); ",
											"pm.globals.set(\"category_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94cd63e0-e4d3-4c3e-822b-52c0ff149b8d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55422f1a-1d67-4292-ae3a-ae8f778a1af2",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"categoryasync_addedid\");  ",
											"postman.setGlobalVariable(\"categoryasync_addedid\", responseBody); ",
											"pm.globals.set(\"categoryasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c68af08d-7df2-4e9d-985b-98d84491b3f0",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "715be990-d765-4132-81fc-51767ccd9012",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/category",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a48ca472-89ff-4743-907b-28d0335b35cd",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify category counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "472e8dae-8dbb-4685-b94b-bcb3d12c05ff",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"category_addedrowversion\");  ",
											"postman.setGlobalVariable(\"category_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"category_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify category returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bcffc75-e36b-411d-b3ea-cf21117ea24c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"categoryasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"categoryasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"categoryasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify category returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761e4c13-d13d-4254-9a9c-d2508ea11119",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify category updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{category_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{category_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b20739af-f7bb-42a1-b514-67684202c046",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify category updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{categoryasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{categoryasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84b2f648-a385-4cc4-824e-6ddd02ce86d0",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c983f80-d89b-48be-bc0e-850f7cf684a6",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT Category tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae34ec0d-c6ad-4b69-831d-57584bd769b3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a933bd12-5723-4737-8885-21589ef95b1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
				,{
					"name": "AssetClass",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d00757d1-c404-4aa8-b755-bbc3fe4a61a9",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6291e1d-f073-4291-b8f7-b0ee37d5c1ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0311fad2-59d9-4120-834f-df345c18605d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2515beb9-fc64-403c-b22d-b0100e7dfafd",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetclass_addedid\");  ",
											"postman.setGlobalVariable(\"assetclass_addedid\", responseBody); ",
											"pm.globals.set(\"assetclass_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e370fe6c-1c95-4262-b50a-5591702cbc8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70f4c767-34aa-4e01-a7f0-fe835c245cb8",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"assetclassasync_addedid\");  ",
											"postman.setGlobalVariable(\"assetclassasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetclassasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5fa9b57-6ead-4297-b142-7e37fabc4023",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8db55c2-98bc-4e55-b0ee-80bb435b3157",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06bc44e1-1591-41df-97ee-3f60d441f073",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetclass counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79700c2e-2468-4283-8d3d-abbe12f9665d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetclass_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetclass_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetclass_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetclass returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65026f66-c2e5-4c36-a679-9128250b19d9",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetclassasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetclassasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetclassasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetclass returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4359522-cddf-4dd9-87d1-d176189c1b97",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetclass updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetclass_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetclass_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91f89a67-2d06-4a37-b990-49e7c2446982",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetclass updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetclassasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetclassasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3387db67-0944-4948-a3ce-5ca9a1091edf",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d7369b6-a9d6-496e-a7ce-e5f4314b2908",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT AssetClass tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18d790f1-afdb-4118-a812-63a17f2b3458",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a996e89-653b-4561-a1e8-1c7beb5f935f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
				,{
					"name": "AssetMaintenance",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78a89589-b709-48b0-a68d-1d56f05f8a9d",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce06dd11-7e57-4f15-8a2d-0bb1a0970619",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78c53921-b5eb-4213-973e-820bf87fba23",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "77b9c661-f80d-42f7-b334-79bb2821cd8c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenance_addedid\");  ",
											"postman.setGlobalVariable(\"assetmaintenance_addedid\", responseBody); ",
											"pm.globals.set(\"assetmaintenance_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd96a58f-9281-4f49-b452-af4887f3d9b9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "588bb505-4bde-489c-abcc-b08bf9088b45",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenanceasync_addedid\");  ",
											"postman.setGlobalVariable(\"assetmaintenanceasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetmaintenanceasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee1b70b7-d391-49a0-8fad-c9de9a453e05",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae5090ec-ed57-4bb3-9107-5e4f5283959d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8faef383-0ddc-47a8-9b1e-ea60054896a5",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetmaintenance counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5031779-d7a9-4b9c-8a54-2f7c82ec71e0",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenance_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetmaintenance_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetmaintenance_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetmaintenance returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9988eb9-dc0b-4a38-8f53-c17cf29666b5",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenanceasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetmaintenanceasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetmaintenanceasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetmaintenance returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "651344bb-b7e9-4465-a226-98bba24bbd63",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetmaintenance updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetmaintenance_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetmaintenance_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7140f1f3-b0d9-44a2-91f8-6a2a3033261d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetmaintenance updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetmaintenanceasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetmaintenanceasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80f611cb-d3ea-4d4c-9d7e-d2db9d71af9d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54b01bcd-c7b8-4379-955c-327a72255a14",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT AssetMaintenance tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b061c21b-4c08-4412-afa0-147dc05585bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7c2faf1-400a-43b0-853a-492bc9fbf364",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
				,{
					"name": "WorkflowTe",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c6a7799-b498-462d-8861-5236656dad19",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42ea0d72-80e5-4397-9d14-0496066e7226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9be685b-8e09-43cb-a7b6-1ac0f9a4797a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fdff67a-d0c3-4ba3-a17d-0711ebef1990",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowte_addedid\");  ",
											"postman.setGlobalVariable(\"workflowte_addedid\", responseBody); ",
											"pm.globals.set(\"workflowte_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "79129738-437e-4b9e-8665-f6111e2f4ec5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2f1d164a-f592-4a67-bde8-b4b5b66dff02",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"workflowteasync_addedid\");  ",
											"postman.setGlobalVariable(\"workflowteasync_addedid\", responseBody); ",
											"pm.globals.set(\"workflowteasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b3ddc6e-1a38-4210-bd73-74892f4dee28",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81300768-4dbe-4c80-a918-55d1bc8a4c84",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af923734-5cb6-48b7-bf68-7ba9e8a81a5c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowte counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b459f8-34ab-4a14-9e51-fa9b39415202",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowte_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowte_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowte_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowte returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8e372e0-339b-4ea8-a2e3-7b57aff2e2d1",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowteasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowteasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowteasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowte returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbb4e07c-59fc-44c6-a553-79197206a440",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowte updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowte_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowte_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53a89842-9f3c-4236-abf2-e366a7b07f36",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowte updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowteasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowteasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9254cbeb-acd0-4c6a-91e0-bb8b3fc6042f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d54c560-0dc3-40ae-a1bc-8788db32bd76",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT WorkflowTe tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ba774e3-a61b-46dd-85a9-2b4e8f42ce9a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80d9c7bf-c097-4a82-8a60-15c784c28b5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
				,{
					"name": "WorkflowVersion",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f0e07c3-3989-46d4-9abd-ebb38e740112",
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f415ec5-aa69-4d84-af1e-5f5040bb19aa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e95765de-1c44-40df-b721-c7b3286c7641",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b29bbea-07ad-4bfa-b2c3-909583804dc8",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowversion_addedid\");  ",
											"postman.setGlobalVariable(\"workflowversion_addedid\", responseBody); ",
											"pm.globals.set(\"workflowversion_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b1a7ee46-1d9e-42fe-90a4-019fbcb5633a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1844e5f7-90a9-44d9-a18c-0b26c3940979",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"workflowversionasync_addedid\");  ",
											"postman.setGlobalVariable(\"workflowversionasync_addedid\", responseBody); ",
											"pm.globals.set(\"workflowversionasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd380214-dd61-4388-a329-81be06020934",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4ef1c65-4d33-4409-894f-08fe036740df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cdc52eb-5292-4c88-a3dc-88da95409a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowversion counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be3ca79c-0840-45bc-a11b-afca0d720ff7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowversion_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowversion_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowversion_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowversion returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6857995-0665-41ff-b350-1b4e8da0ac70",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowversionasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowversionasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowversionasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowversion returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b48bdb4c-67e4-47c9-8c05-26d4874ab423",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowversion updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowversion_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowversion_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7167ef0-6a4e-413a-a276-391467c5fda0",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowversion updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowversionasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowversionasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46d0f9eb-dd46-4d5b-a82c-b15f7afa0750",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4348242-9928-4151-831a-6f0a5f62f9bb",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT WorkflowVersion tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75d0761a-48d8-47b7-9cea-51a8550f2168",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b99843c8-e10f-453e-9c77-809133c8b660",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}				
			],
			"description": "JWT Authentication\n\nNOTE: Set \"UseIndentityServer4\": false in Api's appsettings.json and run API server\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4094f08b-55fb-42e2-9c48-9573966b4aaf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8466e275-6b36-4d67-b21a-081033a4914a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "IS4",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79528e6b-9c51-47eb-a407-db8861076675",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "account_id",
											"value": "AssetManagementProject.webAccount",
											"type": "text"
										},
										{
											"key": "account_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce22a602-aabc-497e-ba39-1442e33a1546",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"account_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"account_addedid\", responseBody); ",
											"pm.globals.set(\"account_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@blastasia.com\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7e08d8e-d6e0-4d20-b8ea-a3ae298f9922",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"accountasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"accountasync_addedid\", responseBody); ",
											"pm.globals.set(\"accountasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@blastasia.com\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47ed0a0a-5d36-4aef-abae-9e3e236c2a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84ceac94-4490-4684-bef1-5eeca0e69f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47ed0a0a-5d36-4aef-abae-9e3e236c2a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84ceac94-4490-4684-bef1-5eeca0e69f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34354726-bee9-4bb8-ab38-dde36f12f42b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"account_addedrowversion\");  ",
											"postman.setGlobalVariable(\"account_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"account_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f06f11f2-9d84-4c4c-a213-8a4de179c4c1",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"accountasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"accountasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"accountasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ca76fc-10df-4ec3-82b9-a58e0454b8de",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{account_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@blastasia.com\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{account_addedrowversion}}\"     }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0afe353-c00b-4f0e-830c-9d068f19fe02",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{accountasync_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@blastasia.com\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{accountasync_addedrowversion}}\"     }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31384209-6078-4f65-90b1-f01a36ed0655",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79528e6b-9c51-47eb-a407-db8861076675",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "AssetManagementProject.webUser",
											"type": "text"
										},
										{
											"key": "user_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c044953-195e-4f0c-b04b-98ae140f7d1f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"user_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"user_addedid\", responseBody); ",
											"pm.globals.set(\"user_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "221df8e7-4e36-464d-8715-c5e6c1384910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f97e586d-69cb-49ce-9c57-bfcedc1ee0ca",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"userasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"userasync_addedid\", responseBody); ",
											"pm.globals.set(\"userasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47ed0a0a-5d36-4aef-abae-9e3e236c2a03",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84ceac94-4490-4684-bef1-5eeca0e69f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67dac4cb-99e7-4cae-851a-035b07a0b902",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09754b14-90e7-4176-8d65-b589abd85002",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"user_addedrowversion\");  ",
											"postman.setGlobalVariable(\"user_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"user_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9f682a-da02-44b6-b54b-8468f2da139f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"userasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"userasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"userasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8f43312-caa9-412e-b3d5-cc0b5e46c476",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{user_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{user_addedrowversion}}\",\n    \"testText\": null\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44d857ee-f00d-4441-8947-59d8bd4d6db7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{userasync_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@blastasia.com\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{userasync_addedrowversion}}\",\n    \"testText\": null\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d0eca3-b385-40c8-9dec-6d3eb17bd220",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],

									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			
				,{
					"name": "Asset",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "427adda6-1d72-44d7-8bc3-cb9b09af620d",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "asset_id",
											"value": "AssetManagementProject.webAsset",
											"type": "text"
										},
										{
											"key": "asset_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "20e234c2-9fd7-496b-8f06-ae2718ffcdbd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b837bf85-8f51-42af-a150-ad778bc8dfe6",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"asset_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"asset_addedid\", responseBody); ",
											"pm.globals.set(\"asset_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57241c44-b1c4-444b-8e2b-8c2a529c2e7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c0487a2-eb0b-4fe8-8608-6cc7c650808b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"assetasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"assetasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b09c6e0d-a533-42ea-933d-66ee3211c7e7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify asset counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "600ac71a-2463-41db-b9f7-3ce88c2811bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6665c3c-5a8e-43cc-bce3-135502bdfe9c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify asset counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b1c7886-7da2-4c6d-a495-6c2c138dc7c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4afa6d58-7185-47ce-bbe9-9ef1e4f58b29",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"asset_addedrowversion\");  ",
											"postman.setGlobalVariable(\"asset_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"asset_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify asset returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7e25b9d-f84a-4cf8-9d8c-283fec61834e",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify asset returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eacd5a0-911e-4830-aa32-2dfbe82d1594",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify asset updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{asset_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{asset_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d987f8aa-e8b0-42a3-a03f-3946413a4aa0",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "149f3bee-4d1b-46ff-9362-d8849a71a543",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/asset/{{asset_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"asset",
										"{{asset_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d59661e-7cfb-499b-a47f-f75f09ca8fd1",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetasync/{{assetasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetasync",
										"{{assetasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 asset tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "993d6f2b-8bf1-4989-9bc5-2fc7400925a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7f39acfe-b7be-4e9b-8e6b-59c1159a1f3b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				
			
				,{
					"name": "Category",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b7eab7-792e-4c66-aefc-3553c68c5d6d",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "category_id",
											"value": "AssetManagementProject.webCategory",
											"type": "text"
										},
										{
											"key": "category_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "952a233b-c382-4e72-9202-3c7bc9193971",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f67fbe8-394b-49a7-8b32-10072050f2f9",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"category_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"category_addedid\", responseBody); ",
											"pm.globals.set(\"category_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1776582-fe8b-42fb-94b9-356e76ab1503",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b84a61d4-9803-4d09-a6fe-1fd991caba51",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"categoryasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"categoryasync_addedid\", responseBody); ",
											"pm.globals.set(\"categoryasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3b0244e-ebb8-4dde-b423-5a245050ea56",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify category counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d925421-0fff-4e0d-8fc5-d87d4a1e6d73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/category",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da76f584-9dae-44d3-984d-48fa9c9fa46d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify category counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9df0ec8-da2c-4826-909f-9eaba4dc72b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5171fe6e-a6c4-454b-8057-3466a953a4ee",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"category_addedrowversion\");  ",
											"postman.setGlobalVariable(\"category_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"category_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify category returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42e94812-bdb8-4303-b662-b1d7a09af361",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"categoryasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"categoryasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"categoryasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify category returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a22d8f4a-dd75-44c5-8b04-4bdf40cbd1fe",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify category updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{category_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{category_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "340e1f4b-d1f5-4f30-8455-112006e33ac9",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{categoryasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{categoryasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ebfe6c5-7cdf-42ed-bffb-6fab375e0293",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/category/{{category_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"category",
										"{{category_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9d67e2f-1898-4343-86a7-2d5c3b0f2b69",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/categoryasync/{{categoryasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"categoryasync",
										"{{categoryasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 category tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b81afa37-0e2a-45c5-89ba-567f419edf1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a44b3ba4-677f-45e9-98a2-204b560ddb9b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				
			
				,{
					"name": "AssetClass",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da28fe88-5ed2-460d-a169-e0f441511253",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "assetclass_id",
											"value": "AssetManagementProject.webAssetClass",
											"type": "text"
										},
										{
											"key": "assetclass_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "174fb783-bb32-4da5-981a-e3b95585aea1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6c590c6-2e3f-44ca-9d77-83e825c76852",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"assetclass_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"assetclass_addedid\", responseBody); ",
											"pm.globals.set(\"assetclass_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ac7891e-96c1-4dab-bbcc-d6d5f69a7efc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "98a5a274-9c36-402d-b053-77463645343c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"assetclassasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"assetclassasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetclassasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "647cb5f4-df41-499a-9fec-34c1702408ef",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetclass counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1411b7cc-7fdc-49fd-81bc-c234f7453dcc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1ebc668-912e-4b50-b1b7-62c1c039411b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetclass counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd86f439-c332-47e6-a36d-0f8773eae03d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b55794c1-4fd7-477a-9ffd-0b9e2d735be2",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetclass_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetclass_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetclass_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetclass returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de3798eb-2749-490f-bf42-ee7c57a3a163",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetclassasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetclassasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetclassasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetclass returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b76fc72-966c-45ff-992b-6d1bf9a4fe45",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetclass updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetclass_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetclass_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "601f605a-71ab-4d6b-93fe-44691696ac77",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetclassasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetclassasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccce2156-3f8e-4f37-a2cc-776e1658e855",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclass/{{assetclass_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclass",
										"{{assetclass_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72bf4523-c04e-4568-8f1b-1512468a3cf8",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetclassasync/{{assetclassasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetclassasync",
										"{{assetclassasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 assetclass tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2155e0b6-c202-47f0-ab0f-a77a78419199",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51678804-aa7b-4297-aaab-9219f293889d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				
			
				,{
					"name": "AssetMaintenance",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "231ff73e-a6ca-4182-9584-ff382c70a57c",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "assetmaintenance_id",
											"value": "AssetManagementProject.webAssetMaintenance",
											"type": "text"
										},
										{
											"key": "assetmaintenance_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44ff992a-152f-4b0c-af21-acbff8bca4eb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "74c6a99b-96f3-4f80-af6c-ce8540d08fd7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"assetmaintenance_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"assetmaintenance_addedid\", responseBody); ",
											"pm.globals.set(\"assetmaintenance_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0def4929-c77c-4702-89eb-76d67a4b53b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90ce45bb-a96c-4d7f-8bfd-89115c2884e2",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"assetmaintenanceasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"assetmaintenanceasync_addedid\", responseBody); ",
											"pm.globals.set(\"assetmaintenanceasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b944850e-d8ca-4c60-9f2a-1c77e6cfed59",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetmaintenance counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0187fc7-76d2-4e8c-9b4e-a3e8bed123e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "560b8d57-b969-4872-918b-1fbe06eefe52",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify assetmaintenance counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fecd8ab6-2c8c-420b-8d14-852d24700e25",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "370b543e-589d-4d8b-a45e-d9e8eeeb85c7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenance_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetmaintenance_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetmaintenance_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetmaintenance returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "210827af-8a04-430e-b30a-c09f7cc0e2e3",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"assetmaintenanceasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"assetmaintenanceasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"assetmaintenanceasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify assetmaintenance returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b81b3f92-edd4-4f19-ab3c-071b3d9ea3fe",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify assetmaintenance updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetmaintenance_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetmaintenance_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfa84c3b-f01f-429c-bb98-ef18eab6f51f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{assetmaintenanceasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{assetmaintenanceasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5955393e-5e14-4c66-ab8e-f7e2cb691b8e",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenance/{{assetmaintenance_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenance",
										"{{assetmaintenance_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b68aca8-69ca-4b32-8cc2-fca31dcb1c4e",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/assetmaintenanceasync/{{assetmaintenanceasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"assetmaintenanceasync",
										"{{assetmaintenanceasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 assetmaintenance tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87beb86a-f2bd-4e13-82c5-3262750678bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "43ff2473-683a-4f2e-83bd-cc87b0af2530",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				
			
				,{
					"name": "WorkflowTe",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "232cd4dc-0abc-4921-a84b-8b2fafdc123e",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "workflowte_id",
											"value": "AssetManagementProject.webWorkflowTe",
											"type": "text"
										},
										{
											"key": "workflowte_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee0c5c86-deb7-41a6-84da-c296434eecd7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89126474-aab2-445d-a5e6-0a904f2c7e4b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"workflowte_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"workflowte_addedid\", responseBody); ",
											"pm.globals.set(\"workflowte_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d905ccc7-287a-4a5a-9459-309b938cae68",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54f16a7a-8b0f-41f6-9bb5-230da44e8fc2",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"workflowteasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"workflowteasync_addedid\", responseBody); ",
											"pm.globals.set(\"workflowteasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "341888fa-606f-4522-b8eb-ae22bc587a7b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowte counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c41d76f-6c37-4f11-834c-d5532aa5fec9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ead547de-997e-4943-bfed-d2a10f0d2fd7",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowte counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dc168c9-3010-482a-b11c-6fed9da87a73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b803971b-1995-4e79-aa40-0afffab69f53",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowte_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowte_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowte_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowte returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65229feb-456a-46e0-9ef2-832471609afd",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowteasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowteasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowteasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowte returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "054521ff-16b6-4a30-99e3-63904db84a69",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowte updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowte_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowte_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e21c668-b99b-46a7-aa86-307bde6fe44b",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowteasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowteasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee4f2232-c036-4460-81f1-3d7d9311b64d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowte/{{workflowte_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowte",
										"{{workflowte_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff74e507-e6ed-4cec-bf5c-5da928c3028a",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowteasync/{{workflowteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowteasync",
										"{{workflowteasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 workflowte tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ec6275e-add1-4487-985d-f23487ab5b3b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "648bc1a3-d578-45a5-8b28-a9fe9192efa0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				
			
				,{
					"name": "WorkflowVersion",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ca485c6-d1b4-4175-84c7-03cabff163fd",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"//is4_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"is4_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"is4_token\", data.access_token); ",
											"pm.globals.set(\"is4_token\", data.access_token);",
											"",
											"console.log(\"is4_token\", data.access_token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "my@email.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "mysecretpassword123",
											"type": "text"
										},
										{
											"key": "workflowversion_id",
											"value": "AssetManagementProject.webWorkflowVersion",
											"type": "text"
										},
										{
											"key": "workflowversion_secret",
											"value": "secret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "read-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://{{is4baseurl}}/connect/token",
									"protocol": "http",
									"host": [
										"{{is4baseurl}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e613fe32-7322-442c-a67d-1afb576c1f33",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a309f3c0-d4f2-4177-b2c1-6c18697b757d",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"workflowversion_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"workflowversion_addedid\", responseBody); ",
											"pm.globals.set(\"workflowversion_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "70e50781-176d-4d7e-8ee8-71d215a07d98",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d06e9efb-bcd1-4be5-8821-21c9a902b8ae",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"workflowversionasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"workflowversionasync_addedid\", responseBody); ",
											"pm.globals.set(\"workflowversionasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df9a1951-cd5c-4ec8-8d27-913b95c1fd46",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowversion counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfcb93d3-07df-475a-be4f-bf2e88d257dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8c756f2-b3c2-4824-b5f5-c27623402580",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify workflowversion counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04f945aa-3176-4896-a794-4997157d243e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60b898f5-9cbb-420e-90bb-06780326285f",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowversion_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowversion_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowversion_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowversion returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b720524-7cc0-459e-8d23-30772a98b401",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"workflowversionasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"workflowversionasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"workflowversionasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify workflowversion returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f28aa21-34e1-4143-9ac9-ebeeb208069a",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify workflowversion updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowversion_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowversion_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9dc8ef9-b267-42d8-aa77-907aec04afb8",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{workflowversionasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{workflowversionasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c267a184-5c51-40fd-931d-efcd0521a89c",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversion/{{workflowversion_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversion",
										"{{workflowversion_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0056527-182e-419a-8f49-993546fc985e",
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{is4_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/workflowversionasync/{{workflowversionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"workflowversionasync",
										"{{workflowversionasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deafult IS4 workflowversion tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b64c60f7-3540-4945-807c-571e0703b18e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8b5bdd0-09d5-4b30-84e8-37bb5acdf792",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
				

			],
			"description": "IndentityServer4 Authentication\n\nNOTE: Before running tests run IndentityServer and set \"UseIndentityServer4\": true in Api's appsettings.json and run Api server",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1c47a7ce-fa9f-4187-9261-f9bf6f206e2c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a16b529-1e78-444e-932f-14c05772d129",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}

	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "802e320e-97b0-4af7-bc78-c468561e7df9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c16740b6-9152-4eee-9b4a-4f52178c813d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2942c45b-81cc-4181-a1e8-ce6ff9796010",
			"key": "apibaseurl",
			"value": "localhost:44341",
			"type": "string"
		},
		{
			"id": "58529c26-9df5-48e3-93be-fac3abfce654",
			"key": "is4baseurl",
			"value": "localhost:5000",
			"type": "string"
		}
	]
}