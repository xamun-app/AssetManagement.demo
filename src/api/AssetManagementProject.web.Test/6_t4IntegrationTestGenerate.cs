

 
 
 
// —————————————— 
// <auto-generated> 
//	This code was auto-generated 07/11/2024 15:39:42
//	T4 template generates test code 
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using AssetManagementProject.web.Api;
using AssetManagementProject.web.Domain;
using IdentityModel.Client;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Xunit;
using static JWT.Controllers.TokenController;

namespace AssetManagementProject.web.Test
{
	#region unit tests
	#region Asset tests

    /// <summary>
    ///
    /// Asset API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class AssetTest: BaseTest
    {
        public HttpClientFixture fixture;
        public AssetTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedAsset { get; set; }

        #region Asset tests

        [Fact]
        public async Task asset_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetid = await util.addAsset(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/asset");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/asset/" + assetid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAsset(httpclient, assetid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task asset_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetViewModel asset = new AssetViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/asset", new StringContent(
                                                               JsonConvert.SerializeObject(asset), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAsset(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/asset/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/asset/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/asset/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/asset/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task asset_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetid = await util.addAsset(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/asset/" + assetid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAsset(httpclient, assetid);
	    //remove if any parent entity added 
        }

        #endregion

        #region Asset async tests

        [Fact]
        public async Task asset_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetid = await util.addAsset(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/assetasync/" + assetid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAsset(httpclient, assetid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task asset_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetViewModel asset = new AssetViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/assetasync", new StringContent(
                                                               JsonConvert.SerializeObject(asset), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAsset(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/assetasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/assetasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/assetasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/assetasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task asset_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetid = await util.addAsset(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetasync/" + assetid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAsset(httpclient, assetid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region Category tests

    /// <summary>
    ///
    /// Category API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class CategoryTest: BaseTest
    {
        public HttpClientFixture fixture;
        public CategoryTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedCategory { get; set; }

        #region Category tests

        [Fact]
        public async Task category_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var categoryid = await util.addCategory(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/category");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/category/" + categoryid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<CategoryViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeCategory(httpclient, categoryid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task category_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            CategoryViewModel category = new CategoryViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/category", new StringContent(
                                                               JsonConvert.SerializeObject(category), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetCategory(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/category/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/category/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/category/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/category/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task category_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var categoryid = await util.addCategory(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/category/" + categoryid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<CategoryViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeCategory(httpclient, categoryid);
	    //remove if any parent entity added 
        }

        #endregion

        #region Category async tests

        [Fact]
        public async Task category_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var categoryid = await util.addCategory(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/categoryasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/categoryasync/" + categoryid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<CategoryViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeCategory(httpclient, categoryid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task category_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            CategoryViewModel category = new CategoryViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/categoryasync", new StringContent(
                                                               JsonConvert.SerializeObject(category), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetCategory(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/categoryasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/categoryasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/categoryasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/categoryasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task category_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var categoryid = await util.addCategory(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/categoryasync/" + categoryid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<CategoryViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeCategory(httpclient, categoryid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region AssetClass tests

    /// <summary>
    ///
    /// AssetClass API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class AssetClassTest: BaseTest
    {
        public HttpClientFixture fixture;
        public AssetClassTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedAssetClass { get; set; }

        #region AssetClass tests

        [Fact]
        public async Task assetclass_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetclassid = await util.addAssetClass(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetclass");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/assetclass/" + assetclassid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetClassViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAssetClass(httpclient, assetclassid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task assetclass_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetClassViewModel assetclass = new AssetClassViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/assetclass", new StringContent(
                                                               JsonConvert.SerializeObject(assetclass), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAssetClass(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/assetclass/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/assetclass/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/assetclass/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/assetclass/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task assetclass_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetclassid = await util.addAssetClass(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetclass/" + assetclassid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetClassViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAssetClass(httpclient, assetclassid);
	    //remove if any parent entity added 
        }

        #endregion

        #region AssetClass async tests

        [Fact]
        public async Task assetclass_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetclassid = await util.addAssetClass(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetclassasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/assetclassasync/" + assetclassid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetClassViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAssetClass(httpclient, assetclassid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task assetclass_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetClassViewModel assetclass = new AssetClassViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/assetclassasync", new StringContent(
                                                               JsonConvert.SerializeObject(assetclass), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAssetClass(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/assetclassasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/assetclassasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/assetclassasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/assetclassasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task assetclass_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetclassid = await util.addAssetClass(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetclassasync/" + assetclassid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetClassViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAssetClass(httpclient, assetclassid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region AssetMaintenance tests

    /// <summary>
    ///
    /// AssetMaintenance API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class AssetMaintenanceTest: BaseTest
    {
        public HttpClientFixture fixture;
        public AssetMaintenanceTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedAssetMaintenance { get; set; }

        #region AssetMaintenance tests

        [Fact]
        public async Task assetmaintenance_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetmaintenanceid = await util.addAssetMaintenance(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetmaintenance");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/assetmaintenance/" + assetmaintenanceid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetMaintenanceViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAssetMaintenance(httpclient, assetmaintenanceid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task assetmaintenance_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetMaintenanceViewModel assetmaintenance = new AssetMaintenanceViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/assetmaintenance", new StringContent(
                                                               JsonConvert.SerializeObject(assetmaintenance), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAssetMaintenance(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/assetmaintenance/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/assetmaintenance/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/assetmaintenance/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/assetmaintenance/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task assetmaintenance_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetmaintenanceid = await util.addAssetMaintenance(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetmaintenance/" + assetmaintenanceid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetMaintenanceViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAssetMaintenance(httpclient, assetmaintenanceid);
	    //remove if any parent entity added 
        }

        #endregion

        #region AssetMaintenance async tests

        [Fact]
        public async Task assetmaintenance_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var assetmaintenanceid = await util.addAssetMaintenance(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetmaintenanceasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/assetmaintenanceasync/" + assetmaintenanceid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetMaintenanceViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeAssetMaintenance(httpclient, assetmaintenanceid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task assetmaintenance_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            AssetMaintenanceViewModel assetmaintenance = new AssetMaintenanceViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/assetmaintenanceasync", new StringContent(
                                                               JsonConvert.SerializeObject(assetmaintenance), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetAssetMaintenance(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/assetmaintenanceasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/assetmaintenanceasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/assetmaintenanceasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/assetmaintenanceasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task assetmaintenance_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var assetmaintenanceid = await util.addAssetMaintenance(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/assetmaintenanceasync/" + assetmaintenanceid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<AssetMaintenanceViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeAssetMaintenance(httpclient, assetmaintenanceid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region WorkflowTe tests

    /// <summary>
    ///
    /// WorkflowTe API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class WorkflowTeTest: BaseTest
    {
        public HttpClientFixture fixture;
        public WorkflowTeTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedWorkflowTe { get; set; }

        #region WorkflowTe tests

        [Fact]
        public async Task workflowte_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var workflowteid = await util.addWorkflowTe(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowte");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/workflowte/" + workflowteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowTeViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeWorkflowTe(httpclient, workflowteid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task workflowte_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            WorkflowTeViewModel workflowte = new WorkflowTeViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/workflowte", new StringContent(
                                                               JsonConvert.SerializeObject(workflowte), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetWorkflowTe(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/workflowte/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/workflowte/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/workflowte/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/workflowte/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task workflowte_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var workflowteid = await util.addWorkflowTe(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowte/" + workflowteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowTeViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeWorkflowTe(httpclient, workflowteid);
	    //remove if any parent entity added 
        }

        #endregion

        #region WorkflowTe async tests

        [Fact]
        public async Task workflowte_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var workflowteid = await util.addWorkflowTe(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowteasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/workflowteasync/" + workflowteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowTeViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeWorkflowTe(httpclient, workflowteid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task workflowte_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            WorkflowTeViewModel workflowte = new WorkflowTeViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/workflowteasync", new StringContent(
                                                               JsonConvert.SerializeObject(workflowte), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetWorkflowTe(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/workflowteasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/workflowteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/workflowteasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/workflowteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task workflowte_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var workflowteid = await util.addWorkflowTe(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowteasync/" + workflowteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowTeViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeWorkflowTe(httpclient, workflowteid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region WorkflowVersion tests

    /// <summary>
    ///
    /// WorkflowVersion API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class WorkflowVersionTest: BaseTest
    {
        public HttpClientFixture fixture;
        public WorkflowVersionTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedWorkflowVersion { get; set; }

        #region WorkflowVersion tests

        [Fact]
        public async Task workflowversion_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var workflowversionid = await util.addWorkflowVersion(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowversion");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/workflowversion/" + workflowversionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowVersionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeWorkflowVersion(httpclient, workflowversionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task workflowversion_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            WorkflowVersionViewModel workflowversion = new WorkflowVersionViewModel
            {
			//MANUAL UPDATES REQUIRED!
	
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/workflowversion", new StringContent(
                                                               JsonConvert.SerializeObject(workflowversion), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetWorkflowVersion(httpclient, id);

            //update test
    
            response = await httpclient.PutAsync("/api/workflowversion/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/workflowversion/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           //var tt = oj["testText"].ToString();
           //Assert.Equal(tt, vmentity.TestText);
           //
           ////another update with same account - concurrency
           //vmentity.TestText = "tt updated 2";
           //response = await httpclient.PutAsync("/api/workflowversion/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
           //Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/workflowversion/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task workflowversion_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var workflowversionid = await util.addWorkflowVersion(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowversion/" + workflowversionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowVersionViewModel>(jsonString);
            //Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeWorkflowVersion(httpclient, workflowversionid);
	    //remove if any parent entity added 
        }

        #endregion

        #region WorkflowVersion async tests

        [Fact]
        public async Task workflowversion_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var workflowversionid = await util.addWorkflowVersion(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowversionasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/workflowversionasync/" + workflowversionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowVersionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeWorkflowVersion(httpclient, workflowversionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task workflowversion_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            WorkflowVersionViewModel workflowversion = new WorkflowVersionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			//TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/workflowversionasync", new StringContent(
                                                               JsonConvert.SerializeObject(workflowversion), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetWorkflowVersion(httpclient, id);

            //update test
            //vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/workflowversionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/workflowversionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
           // var tt = oj["testText"].ToString();
           // Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            //vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/workflowversionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/workflowversionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task workflowversion_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var workflowversionid = await util.addWorkflowVersion(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/workflowversionasync/" + workflowversionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<WorkflowVersionViewModel>(jsonString);
           // Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeWorkflowVersion(httpclient, workflowversionid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion

    #endregion

    #region Shared test

    public class UtilityExt
    {

        public async Task<int> addAsset(HttpClient client)
        {
		    
            AssetViewModel vmentity = new AssetViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/asset", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<AssetViewModel> GetAsset(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/assetasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<AssetViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeAsset(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/asset/" + id.ToString());
        }


        public async Task<int> addCategory(HttpClient client)
        {
		    
            CategoryViewModel vmentity = new CategoryViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/category", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<CategoryViewModel> GetCategory(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/categoryasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<CategoryViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeCategory(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/category/" + id.ToString());
        }


        public async Task<int> addAssetClass(HttpClient client)
        {
		    
            AssetClassViewModel vmentity = new AssetClassViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/assetclass", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<AssetClassViewModel> GetAssetClass(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/assetclassasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<AssetClassViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeAssetClass(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/assetclass/" + id.ToString());
        }


        public async Task<int> addAssetMaintenance(HttpClient client)
        {
		    
            AssetMaintenanceViewModel vmentity = new AssetMaintenanceViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/assetmaintenance", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<AssetMaintenanceViewModel> GetAssetMaintenance(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/assetmaintenanceasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<AssetMaintenanceViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeAssetMaintenance(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/assetmaintenance/" + id.ToString());
        }


        public async Task<int> addWorkflowTe(HttpClient client)
        {
		    
            WorkflowTeViewModel vmentity = new WorkflowTeViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/workflowte", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<WorkflowTeViewModel> GetWorkflowTe(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/workflowteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<WorkflowTeViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeWorkflowTe(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/workflowte/" + id.ToString());
        }


        public async Task<int> addWorkflowVersion(HttpClient client)
        {
		    
            WorkflowVersionViewModel vmentity = new WorkflowVersionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object

            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/workflowversion", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<WorkflowVersionViewModel> GetWorkflowVersion(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/workflowversionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<WorkflowVersionViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeWorkflowVersion(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/workflowversion/" + id.ToString());
        }

	}
	 #endregion
}

