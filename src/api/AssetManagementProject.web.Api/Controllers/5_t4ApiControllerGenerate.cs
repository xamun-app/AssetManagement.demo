

 
 
 
// —————————————— 
// <auto-generated> 
//	This code was auto-generated 07/11/2024 15:39:13 
//     	T4 template generates controller's code
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using AssetManagementProject.web.Api.Configuration;
using AssetManagementProject.web.Domain;
using AssetManagementProject.web.Entity.Context;
using AssetManagementProject.web.Domain.Service;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;
using Serilog;
using AssetManagementProject.web.Entity;

namespace AssetManagementProject.web.Api.Controllers
{
    /// <summary>
    ///    
    /// A Asset controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetController : ControllerBase
    {
        private readonly AssetService<AssetViewModel, Asset> _assetService;
        public AssetController(AssetService<AssetViewModel, Asset> assetService)
        {
            _assetService = assetService;
        }
		
    

	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<AssetViewModel> GetAll()
        {
	    //Serilog log examples 
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var items = _assetService.GetAll();
            return items;
        }

       [Authorize]
       [HttpGet("GetByPage")]

       public PageResult<AssetViewModel> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
 
            var items = _assetService.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return items;
       
       }
        

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _assetService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public IActionResult Create([FromBody] AssetViewModel asset)
        {
            if (asset == null)
                return BadRequest();

            var id = _assetService.Add(asset);
            return Created($"api/Asset/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] AssetViewModel asset)
        {
            if (asset == null || asset.Id != id)
                return BadRequest();

	    var retVal = _assetService.Update(asset);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(asset);
        }

        //delete 
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _assetService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A Asset controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetAsyncController : ControllerBase
    {
        private readonly AssetServiceAsync<AssetViewModel, Asset> _assetServiceAsync;
        public AssetAsyncController(AssetServiceAsync<AssetViewModel, Asset> assetServiceAsync)
        {
            _assetServiceAsync = assetServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _assetServiceAsync.GetAll();
            return Ok(items);
        }

       [Authorize]
       [HttpGet("GetByPage")]
       public async Task<IActionResult> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var page = await _assetServiceAsync.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return Ok(page);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _assetServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] AssetViewModel asset)
        {
            if (asset == null)
                return BadRequest();

            var id = await _assetServiceAsync.Add(asset);
            return Created($"api/Asset/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] AssetViewModel asset)
        {
            if (asset == null || asset.Id != id)
                return BadRequest();

	    var retVal = await _assetServiceAsync.Update(asset);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(asset);
        }


        //delete
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _assetServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A Category controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class CategoryController : ControllerBase
    {
        private readonly CategoryService<CategoryViewModel, Category> _categoryService;
        public CategoryController(CategoryService<CategoryViewModel, Category> categoryService)
        {
            _categoryService = categoryService;
        }
		
    

	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<CategoryViewModel> GetAll()
        {
	    //Serilog log examples 
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var items = _categoryService.GetAll();
            return items;
        }

       [Authorize]
       [HttpGet("GetByPage")]

       public PageResult<CategoryViewModel> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
 
            var items = _categoryService.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return items;
       
       }
        

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _categoryService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public IActionResult Create([FromBody] CategoryViewModel category)
        {
            if (category == null)
                return BadRequest();

            var id = _categoryService.Add(category);
            return Created($"api/Category/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] CategoryViewModel category)
        {
            if (category == null || category.Id != id)
                return BadRequest();

	    var retVal = _categoryService.Update(category);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(category);
        }

        //delete 
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _categoryService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A Category controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class CategoryAsyncController : ControllerBase
    {
        private readonly CategoryServiceAsync<CategoryViewModel, Category> _categoryServiceAsync;
        public CategoryAsyncController(CategoryServiceAsync<CategoryViewModel, Category> categoryServiceAsync)
        {
            _categoryServiceAsync = categoryServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _categoryServiceAsync.GetAll();
            return Ok(items);
        }

       [Authorize]
       [HttpGet("GetByPage")]
       public async Task<IActionResult> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var page = await _categoryServiceAsync.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return Ok(page);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _categoryServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CategoryViewModel category)
        {
            if (category == null)
                return BadRequest();

            var id = await _categoryServiceAsync.Add(category);
            return Created($"api/Category/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] CategoryViewModel category)
        {
            if (category == null || category.Id != id)
                return BadRequest();

	    var retVal = await _categoryServiceAsync.Update(category);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(category);
        }


        //delete
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _categoryServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A AssetClass controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetClassController : ControllerBase
    {
        private readonly AssetClassService<AssetClassViewModel, AssetClass> _assetclassService;
        public AssetClassController(AssetClassService<AssetClassViewModel, AssetClass> assetclassService)
        {
            _assetclassService = assetclassService;
        }
		
    

	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<AssetClassViewModel> GetAll()
        {
	    //Serilog log examples 
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var items = _assetclassService.GetAll();
            return items;
        }

       [Authorize]
       [HttpGet("GetByPage")]

       public PageResult<AssetClassViewModel> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
 
            var items = _assetclassService.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return items;
       
       }
        

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _assetclassService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public IActionResult Create([FromBody] AssetClassViewModel assetclass)
        {
            if (assetclass == null)
                return BadRequest();

            var id = _assetclassService.Add(assetclass);
            return Created($"api/AssetClass/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] AssetClassViewModel assetclass)
        {
            if (assetclass == null || assetclass.Id != id)
                return BadRequest();

	    var retVal = _assetclassService.Update(assetclass);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(assetclass);
        }

        //delete 
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _assetclassService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A AssetClass controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetClassAsyncController : ControllerBase
    {
        private readonly AssetClassServiceAsync<AssetClassViewModel, AssetClass> _assetclassServiceAsync;
        public AssetClassAsyncController(AssetClassServiceAsync<AssetClassViewModel, AssetClass> assetclassServiceAsync)
        {
            _assetclassServiceAsync = assetclassServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _assetclassServiceAsync.GetAll();
            return Ok(items);
        }

       [Authorize]
       [HttpGet("GetByPage")]
       public async Task<IActionResult> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var page = await _assetclassServiceAsync.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return Ok(page);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _assetclassServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] AssetClassViewModel assetclass)
        {
            if (assetclass == null)
                return BadRequest();

            var id = await _assetclassServiceAsync.Add(assetclass);
            return Created($"api/AssetClass/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] AssetClassViewModel assetclass)
        {
            if (assetclass == null || assetclass.Id != id)
                return BadRequest();

	    var retVal = await _assetclassServiceAsync.Update(assetclass);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(assetclass);
        }


        //delete
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _assetclassServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A AssetMaintenance controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetMaintenanceController : ControllerBase
    {
        private readonly AssetMaintenanceService<AssetMaintenanceViewModel, AssetMaintenance> _assetmaintenanceService;
        public AssetMaintenanceController(AssetMaintenanceService<AssetMaintenanceViewModel, AssetMaintenance> assetmaintenanceService)
        {
            _assetmaintenanceService = assetmaintenanceService;
        }
		
    

	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<AssetMaintenanceViewModel> GetAll()
        {
	    //Serilog log examples 
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var items = _assetmaintenanceService.GetAll();
            return items;
        }

       [Authorize]
       [HttpGet("GetByPage")]

       public PageResult<AssetMaintenanceViewModel> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
 
            var items = _assetmaintenanceService.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return items;
       
       }
        

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _assetmaintenanceService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public IActionResult Create([FromBody] AssetMaintenanceViewModel assetmaintenance)
        {
            if (assetmaintenance == null)
                return BadRequest();

            var id = _assetmaintenanceService.Add(assetmaintenance);
            return Created($"api/AssetMaintenance/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] AssetMaintenanceViewModel assetmaintenance)
        {
            if (assetmaintenance == null || assetmaintenance.Id != id)
                return BadRequest();

	    var retVal = _assetmaintenanceService.Update(assetmaintenance);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(assetmaintenance);
        }

        //delete 
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _assetmaintenanceService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A AssetMaintenance controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public partial class AssetMaintenanceAsyncController : ControllerBase
    {
        private readonly AssetMaintenanceServiceAsync<AssetMaintenanceViewModel, AssetMaintenance> _assetmaintenanceServiceAsync;
        public AssetMaintenanceAsyncController(AssetMaintenanceServiceAsync<AssetMaintenanceViewModel, AssetMaintenance> assetmaintenanceServiceAsync)
        {
            _assetmaintenanceServiceAsync = assetmaintenanceServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _assetmaintenanceServiceAsync.GetAll();
            return Ok(items);
        }

       [Authorize]
       [HttpGet("GetByPage")]
       public async Task<IActionResult> GetByPage(int pageIndex = 0, int pageSize = 10,
            string sortColumn = null, string sortOrder = null, string filterColumn = null, string filterQuery = null)
        {
            //Log.Information("Log: Log.Information");
            //Log.Warning("Log: Log.Warning");
            //Log.Error("Log: Log.Error");
            //Log.Fatal("Log: Log.Fatal");
            var page = await _assetmaintenanceServiceAsync.GetPage(pageIndex, pageSize, sortColumn, sortOrder, filterColumn, filterQuery);
            return Ok(page);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _assetmaintenanceServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] AssetMaintenanceViewModel assetmaintenance)
        {
            if (assetmaintenance == null)
                return BadRequest();

            var id = await _assetmaintenanceServiceAsync.Add(assetmaintenance);
            return Created($"api/AssetMaintenance/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] AssetMaintenanceViewModel assetmaintenance)
        {
            if (assetmaintenance == null || assetmaintenance.Id != id)
                return BadRequest();

	    var retVal = await _assetmaintenanceServiceAsync.Update(assetmaintenance);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(assetmaintenance);
        }


        //delete
        [Authorize(Policy = AuthorizationRolesConstants.Administrator)]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _assetmaintenanceServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
}